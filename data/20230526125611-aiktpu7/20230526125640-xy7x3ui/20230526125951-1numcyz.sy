{
	"ID": "20230526125951-1numcyz",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230526125951-1numcyz",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230526130038-gobiw5v\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230526130038-wzeuvvi\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230526130038-wzeuvvi\u0026quot;,\u0026quot;focusStart\u0026quot;:3,\u0026quot;focusEnd\u0026quot;:3}",
		"title": "C++特性",
		"updated": "20230714114500"
	},
	"Children": [
		{
			"ID": "20230526130038-gobiw5v",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230526130038-gobiw5v",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1. 函数"
				}
			]
		},
		{
			"ID": "20230526130038-qflyqg4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230526130038-qflyqg4",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "c++的类函数可以在类的的外面通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "返回类型 类名::方法名(){}"
				},
				{
					"Type": "NodeText",
					"Data": "​的方式进行声明定义"
				}
			]
		},
		{
			"ID": "20230526130038-6aj6ylu",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230526130038-6aj6ylu",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.1 构造函数"
				}
			]
		},
		{
			"ID": "20230526130038-xdt8uyf",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230526130038-xdt8uyf",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230526130038-h1pg9kq",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230526130038-h1pg9kq",
						"updated": "20230526130038"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "类的构造函数是类的一种特殊的成员函数，它会在每次创建类的新对象时执行。\n构造函数的名称与类的名称是完全相同的，并且不会返回任何类型，也不会返回 void。构造函数可用于\n为某些成员变量设置初始值。"
						}
					]
				}
			]
		},
		{
			"ID": "20230526130038-bhasf9b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230526130038-bhasf9b",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码示例"
				}
			]
		},
		{
			"ID": "20230526130038-km8x8i0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230526130038-km8x8i0",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yysr"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\n \nusing namespace std;\n \nclass Line\n{\n   public:\n      void setLength( double len );\n      double getLength( void );\n      Line();  // 这是构造函数\n \n   private:\n      double length;\n};\n \n// 成员函数定义，包括构造函数\nLine::Line(void)\n{\n    cout \u003c\u003c \"Object is being created\" \u003c\u003c endl;\n}\n \nvoid Line::setLength( double len )\n{\n    length = len;\n}\n \ndouble Line::getLength( void )\n{\n    return length;\n}\n// 程序的主函数\nint main( )\n{\n   Line line;\n \n   // 设置长度\n   line.setLength(6.0); \n   cout \u003c\u003c \"Length of line : \" \u003c\u003c line.getLength() \u003c\u003cendl;\n \n   return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230526130038-ge8tu5l",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230526130038-ge8tu5l",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.2 方法重载和运算符重载"
				}
			]
		},
		{
			"ID": "20230526130038-a6in4d9",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230526130038-a6in4d9",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230526130038-bd84bs6",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230526130038-bd84bs6",
						"updated": "20230526130038"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "C++ 允许在同一作用域中的某个函数和运算符指定多个定义，分别称为函数重载和运算符重载。\n重载声明是指一个与之前已经在该作用域内声明过的函数或方法具有相同名称的声明，但是它们的参数列表和定义（实现）不相同。\n当您调用一个重载函数或重载运算符时，编译器通过把您所使用的参数类型与定义中的参数类型进行比较，决定选用最合适的定义。选择最合适的重载函数或重载运算符的过程，称为重载决策。"
						}
					]
				}
			]
		},
		{
			"ID": "20230526130038-s9orcyk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230526130038-s9orcyk",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "C++ 中的函数重载"
				},
				{
					"Type": "NodeText",
					"Data": "\n在同一个作用域内，可以声明几个功能类似的同名函数，但是这些同名函数的形式参数（指参数的个数、类型或者顺序）必须不同。不能仅通过返回类型的不同来重载函数。"
				}
			]
		},
		{
			"ID": "20230526130038-gv397xn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230526130038-gv397xn",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yysr"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\nusing namespace std;\n \nclass printData\n{\n   public:\n      void print(int i) {\n        cout \u003c\u003c \"整数为: \" \u003c\u003c i \u003c\u003c endl;\n      }\n \n      void print(double  f) {\n        cout \u003c\u003c \"浮点数为: \" \u003c\u003c f \u003c\u003c endl;\n      }\n \n      void print(char c[]) {\n        cout \u003c\u003c \"字符串为: \" \u003c\u003c c \u003c\u003c endl;\n      }\n};\n \nint main(void)\n{\n   printData pd;\n \n   // 输出整数\n   pd.print(5);\n   // 输出浮点数\n   pd.print(500.263);\n   // 输出字符串\n   char c[] = \"Hello C++\";\n   pd.print(c);\n \n   return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230526130038-1oe43kk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230526130038-1oe43kk",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "C++ 中的运算符重载"
				},
				{
					"Type": "NodeText",
					"Data": "\n可以重定义或重载大部分 C++ 内置的运算符。这样，您就能使用自定义类型的运算符。"
				}
			]
		},
		{
			"ID": "20230526130038-t61cdtr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230526130038-t61cdtr",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "重载的运算符是带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个返回类型和一个参数列表。"
				}
			]
		},
		{
			"ID": "20230526130038-yh0gdmd",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230526130038-yh0gdmd",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230526130038-7wvh4cx",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230526130038-7wvh4cx",
						"updated": "20230526130038"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "Box operator+(const Box\u0026);\n声明加法运算符用于把两个 Box 对象相加，返回最终的 Box 对象。大多数的重载运算符可被定义为普通的非成员函数或者被定义为类成员函数。如果我们定义上面的函数为类的非成员函数，那么我们需要为每次操作传递两个参数，如下所示："
						}
					]
				}
			]
		},
		{
			"ID": "20230526130038-knay1nx",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230526130038-knay1nx",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230526130038-edaxfdt",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230526130038-edaxfdt",
						"updated": "20230526130038"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "Box operator+(const Box\u0026, const Box\u0026);"
						}
					]
				}
			]
		},
		{
			"ID": "20230526130038-wh9kv52",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230526130038-wh9kv52",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "运算符重载的基本格式"
				}
			]
		},
		{
			"ID": "20230526130038-v7drohi",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230526130038-v7drohi",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yysr"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": " 返回值类型 类名::operator重载的运算符(参数表)\n   {\n   ……\n   }\n\noperator是关键字，它与重载的运算符一起构成函数名。\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230526130038-inch9uf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230526130038-inch9uf",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码示例"
				}
			]
		},
		{
			"ID": "20230526130038-9zz9dbr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230526130038-9zz9dbr",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yysr"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\nusing namespace std;\n \nclass Box\n{\n   public:\n \n      double getVolume(void)\n      {\n         return length * breadth * height;\n      }\n      void setLength( double len )\n      {\n          length = len;\n      }\n \n      void setBreadth( double bre )\n      {\n          breadth = bre;\n      }\n \n      void setHeight( double hei )\n      {\n          height = hei;\n      }\n      // 重载 + 运算符，用于把两个 Box 对象相加\n      Box operator+(const Box\u0026 b)\n      {\n         Box box;\n         box.length = this-\u003elength + b.length;\n         box.breadth = this-\u003ebreadth + b.breadth;\n         box.height = this-\u003eheight + b.height;\n         return box;\n      }\n   private:\n      double length;      // 长度\n      double breadth;     // 宽度\n      double height;      // 高度\n};\n// 程序的主函数\nint main( )\n{\n   Box Box1;                // 声明 Box1，类型为 Box\n   Box Box2;                // 声明 Box2，类型为 Box\n   Box Box3;                // 声明 Box3，类型为 Box\n   double volume = 0.0;     // 把体积存储在该变量中\n \n   // Box1 详述\n   Box1.setLength(6.0); \n   Box1.setBreadth(7.0); \n   Box1.setHeight(5.0);\n \n   // Box2 详述\n   Box2.setLength(12.0); \n   Box2.setBreadth(13.0); \n   Box2.setHeight(10.0);\n \n   // Box1 的体积\n   volume = Box1.getVolume();\n   cout \u003c\u003c \"Volume of Box1 : \" \u003c\u003c volume \u003c\u003cendl;\n \n   // Box2 的体积\n   volume = Box2.getVolume();\n   cout \u003c\u003c \"Volume of Box2 : \" \u003c\u003c volume \u003c\u003cendl;\n \n   // 把两个对象相加，得到 Box3\n   Box3 = Box1 + Box2;\n \n   // Box3 的体积\n   volume = Box3.getVolume();\n   cout \u003c\u003c \"Volume of Box3 : \" \u003c\u003c volume \u003c\u003cendl;\n \n   return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230526130038-ugfg1pw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230526130038-ugfg1pw",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当上面的代码被编译和执行时，它会产生下列结果："
				}
			]
		},
		{
			"ID": "20230526130038-mlrhuql",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230526130038-mlrhuql",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230526130038-bvh2q1w",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230526130038-bvh2q1w",
						"updated": "20230526130038"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "Volume of Box1 : 210\nVolume of Box2 : 1560\nVolume of Box3 : 5400"
						}
					]
				}
			]
		},
		{
			"ID": "20230526130038-9pvmu3i",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230526130038-9pvmu3i",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"ID": "20230526130038-k8pqf9f",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230526130038-k8pqf9f",
						"updated": "20230526130038"
					},
					"Children": [
						{
							"ID": "20230526130038-0mvzkj8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230526130038-0mvzkj8",
								"updated": "20230526130038"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "可重载运算符\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "可重载运算符"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://33373sl116.zicp.fun:443/image-blog/202305251728049.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20230526130038-2zvrcab",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230526130038-2zvrcab",
						"updated": "20230526130038"
					},
					"Children": [
						{
							"ID": "20230526130038-41m4ahg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230526130038-41m4ahg",
								"updated": "20230526130038"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不可重载运算符"
								}
							]
						},
						{
							"ID": "20230526130038-4dxaa8i",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230526130038-4dxaa8i",
								"updated": "20230526130038"
							},
							"Children": [
								{
									"ID": "20230526130038-7zh7epi",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230526130038-7zh7epi",
										"updated": "20230526130038"
									},
									"Children": [
										{
											"ID": "20230526130038-btwo843",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230526130038-btwo843",
												"updated": "20230526130038"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": ".：成员访问运算符"
												}
											]
										}
									]
								},
								{
									"ID": "20230526130038-3b61tdf",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230526130038-3b61tdf",
										"updated": "20230526130038"
									},
									"Children": [
										{
											"ID": "20230526130038-o6pbnyd",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230526130038-o6pbnyd",
												"updated": "20230526130038"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "."
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "em",
													"TextMarkTextContent": ", -\u0026gt;"
												},
												{
													"Type": "NodeText",
													"Data": "：成员指针访问运算符"
												}
											]
										}
									]
								},
								{
									"ID": "20230526130038-41j0ke2",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230526130038-41j0ke2",
										"updated": "20230526130038"
									},
									"Children": [
										{
											"ID": "20230526130038-q6jvrke",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230526130038-q6jvrke",
												"updated": "20230526130038"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "::：域运算符"
												}
											]
										}
									]
								},
								{
									"ID": "20230526130038-jhlnnpi",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230526130038-jhlnnpi",
										"updated": "20230526130038"
									},
									"Children": [
										{
											"ID": "20230526130038-8a5fsav",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230526130038-8a5fsav",
												"updated": "20230526130038"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "sizeof：长度运算符"
												}
											]
										}
									]
								},
								{
									"ID": "20230526130038-uvs7s9t",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230526130038-uvs7s9t",
										"updated": "20230526130038"
									},
									"Children": [
										{
											"ID": "20230526130038-i5ulw3q",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230526130038-i5ulw3q",
												"updated": "20230526130038"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "?:：条件运算符"
												}
											]
										}
									]
								},
								{
									"ID": "20230526130038-2u7d2zk",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230526130038-2u7d2zk",
										"updated": "20230526130038"
									},
									"Children": [
										{
											"ID": "20230526130038-t7q4udt",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230526130038-t7q4udt",
												"updated": "20230526130038"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "#： 预处理符号"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230526130038-f5one07",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230526130038-f5one07",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.3 析构函数"
				}
			]
		},
		{
			"ID": "20230526130038-wlwq7om",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230526130038-wlwq7om",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230526130038-ftmee6i",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230526130038-ftmee6i",
						"updated": "20230526130038"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "类的析构函数是类的一种特殊的成员函数，它会在每次删除所创建的对象时执行。\n析构函数的名称与类的名称是完全相同的，只是在前面加了个波浪号（~）作为前缀，它不会返回任何值,也不能带有任何参数。析构函数有助于在跳出程序（比如关闭文件、释放内存等）前释放资源。\n"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "strong",
							"TextMarkTextContent": "补充："
						},
						{
							"Type": "NodeText",
							"Data": " 析构函数与java中finalize函数作用相类似，可以充当做垃圾回收机制。"
						}
					]
				}
			]
		},
		{
			"ID": "20230526130038-wp6qfsf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230526130038-wp6qfsf",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码示例"
				}
			]
		},
		{
			"ID": "20230526130038-pljmxft",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230526130038-pljmxft",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yysr"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\n \nusing namespace std;\n \nclass Line\n{\n   public:\n      void setLength( double len );\n      double getLength( void );\n      Line();   // 这是构造函数声明\n      ~Line();  // 这是析构函数声明\n \n   private:\n      double length;\n};\n \n// 成员函数定义，包括构造函数\nLine::Line(void)\n{\n    cout \u003c\u003c \"Object is being created\" \u003c\u003c endl;\n}\nLine::~Line(void)\n{\n    cout \u003c\u003c \"Object is being deleted\" \u003c\u003c endl;\n}\n \nvoid Line::setLength( double len )\n{\n    length = len;\n}\n \ndouble Line::getLength( void )\n{\n    return length;\n}\n// 程序的主函数\nint main( )\n{\n   Line line;\n \n   // 设置长度\n   line.setLength(6.0); \n   cout \u003c\u003c \"Length of line : \" \u003c\u003c line.getLength() \u003c\u003cendl;\n \n   return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230526130038-y3txdfv",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230526130038-y3txdfv",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.4 虚函数和纯虚函数"
				}
			]
		},
		{
			"ID": "20230526130038-u51qtac",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230526130038-u51qtac",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "虚函数和纯虚函数的主要作用是为了实现"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "多态"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230526130038-9v1ufr8",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230526130038-9v1ufr8",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230526130038-l0ixg4w",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230526130038-l0ixg4w",
						"updated": "20230526130038"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "定义一个函数为虚函数，不代表函数为不被实现的函数。\n定义他为虚函数是为了允许用基类的指针来调用子类的这个函数。\n定义一个函数为纯虚函数，才代表函数没有被实现。\n定义纯虚函数是为了实现一个接口，起到一个规范的作用，规范继承这个类的程序员必须实现这个函数。\n"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "strong",
							"TextMarkTextContent": "补充："
						},
						{
							"Type": "NodeText",
							"Data": " "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "虚函数"
						},
						{
							"Type": "NodeText",
							"Data": "​允许基类通过指针调用子类中重写的这个虚函数（这个方法定义在父类"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "virtual type function()"
						},
						{
							"Type": "NodeText",
							"Data": "​），"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "纯虚函数"
						},
						{
							"Type": "NodeText",
							"Data": "​类似java中的抽象方法，子类必须重新此方法"
						}
					]
				}
			]
		},
		{
			"ID": "20230526130038-5rte5py",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230526130038-5rte5py",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "虚代码示例"
				}
			]
		},
		{
			"ID": "20230526130038-qlgaafo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230526130038-qlgaafo",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yysr"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class A\n{\npublic:\n    virtual void foo()\n    {\n        cout\u003c\u003c\"A::foo() is called\"\u003c\u003cendl;\n    }\n};\nclass B:public A\n{\npublic:\n    void foo()\n    {\n        cout\u003c\u003c\"B::foo() is called\"\u003c\u003cendl;\n    }\n};\nint main(void)\n{\n    A *a = new B();\n    a-\u003efoo();   // 在这里，a虽然是指向A的指针，但是被调用的函数(foo)却是B的!\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230526130038-thxo6to",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230526130038-thxo6to",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "纯虚函数定义代码示例"
				}
			]
		},
		{
			"ID": "20230526130038-qq726oc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230526130038-qq726oc",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yysr"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "virtual void funtion1()=0\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230526130038-0zis2pr",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230526130038-0zis2pr",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.5 友元函数"
				}
			]
		},
		{
			"ID": "20230526130038-p9ev0tl",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230526130038-p9ev0tl",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230526130038-k85ecb9",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230526130038-k85ecb9",
						"updated": "20230526130038"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "类的友元函数是定义在类外部，但有权访问类的所有私有（private）成员和保护（protected）成员。尽管友元函数的原型有在类的定义中出现过，但是友元函数并不是成员函数。\n友元可以是一个函数，该函数被称为友元函数；友元也可以是一个类，该类被称为友元类，在这种情况下，整个类及其所有成员都是友元。\n如果要声明函数为一个类的友元，需要在类定义中该函数原型前使用关键字 friend。"
						}
					]
				}
			]
		},
		{
			"ID": "20230526130038-wdvpmxn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230526130038-wdvpmxn",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用示例"
				}
			]
		},
		{
			"ID": "20230526130038-lapa13u",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230526130038-lapa13u",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yysr"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Box\n{\n   double width;\npublic:\n   double length;\n   friend void printWidth( Box box );\n   void setWidth( double wid );\n};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230526130038-1xsql9w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230526130038-1xsql9w",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "声明类 ClassTwo 的所有成员函数作为类 ClassOne 的友元，需要在类 ClassOne 的定义中放置如下声明："
				}
			]
		},
		{
			"ID": "20230526130038-qb0qq8r",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230526130038-qb0qq8r",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yysr"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "friend class ClassTwo;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230526130038-qj5pys1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230526130038-qj5pys1",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码示例"
				}
			]
		},
		{
			"ID": "20230526130038-wzeuvvi",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230526130038-wzeuvvi",
				"updated": "20230526130038"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yysr"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\n \nusing namespace std;\n \nclass Box\n{\n   double width;\npublic:\n   friend void printWidth( Box box );\n   void setWidth( double wid );\n};\n \n// 成员函数定义\nvoid Box::setWidth( double wid )\n{\n    width = wid;\n}\n \n// 请注意：printWidth() 不是任何类的成员函数\nvoid printWidth( Box box )\n{\n   /* 因为 printWidth() 是 Box 的友元，它可以直接访问该类的任何成员 */\n   cout \u003c\u003c \"Width of box : \" \u003c\u003c box.width \u003c\u003cendl;\n}\n \n// 程序的主函数\nint main( )\n{\n   Box box;\n \n   // 使用成员函数设置宽度\n   box.setWidth(10.0);\n   \n   // 使用友元函数输出宽度\n   printWidth( box );\n \n   return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230714114229-yodzh51",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230714114229-yodzh51",
				"updated": "20230714114306"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.运算符"
				}
			]
		},
		{
			"ID": "20230714114310-69765hj",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230714114310-69765hj",
				"updated": "20230714114413"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.1 C++中::和:，.和-\u003e的作用与区别"
				}
			]
		},
		{
			"ID": "20230714114451-29ucze7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230714114451-29ucze7",
				"updated": "20230714114500"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "参考博客链接："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://zhuanlan.zhihu.com/p/165992745",
					"TextMarkTextContent": "C++中::和:， .和-\u0026gt;的作用和区别? - 知乎 (zhihu.com)"
				}
			]
		}
	]
}